Package: dpkg
Version: 1.16.12
Revision: 1.1
GCC: 4.0
## Remove po4a
### Comment out libncursesw5 for bootstrap version, and don't make dselect
BuildDepends: <<
  fink (>= 0.32),
  libgettext8-dev,
  gettext-tools (>= 0.18),
  liblzma5,
  libncursesw5,
  bzip2-dev
<<
Depends: <<
  bzip2-shlibs,
  libgettext8-shlibs,
  liblzma5-shlibs
<<
## debianutils is a runtime dep for the cron job with calls savelog
RuntimeDepends: <<
  tar,
  install-info,
  debianutils
<<
Conflicts: dpkg-bootstrap
Replaces: dpkg-bootstrap
Recommends: anacron
Suggests: apt
Essential: yes
Maintainer: Fink Core Group <fink-core@lists.sourceforge.net>

Source: mirror:debian:/pool/main/d/%n/%n_%v.tar.xz
SourceDirectory: dpkg-%v
Source-MD5: b7e9cac52ff7882b088a3058b52081b5

PatchFile: dpkg.patch
PatchFile-MD5: 955e0a002c785067af074e312da4747f

PatchScript: <<
sed -e 's,@FINKPREFIX@,%p,g' %{PatchFile} | patch -p1

patch -p1 < fink/patches/add-BOD.patch
patch -p1 < fink/patches/build-fix.patch
patch -p1 < fink/patches/c++filt-defaults.patch
patch -p1 < fink/patches/dselect-methods.patch
patch -p1 < fink/patches/fink-triggers.patch
patch -p1 < fink/patches/fink-virtuals.patch
patch -p1 < fink/patches/full-path-calls.patch
patch -p1 < fink/patches/gzip-rsyncable-fix.patch
patch -p1 < fink/patches/location-fixes.patch
patch -p1 < fink/patches/protect-system-dirs.patch
patch -p1 < fink/patches/so-to-dylib.patch
patch -p1 < fink/patches/test-fix.patch
patch -p1 < fink/patches/fink-as-vendor.patch

# Remove po4a and make sure it can't be found if it's installed
# this is to keep fink policy happy since it has to build the same
# everytime on all systems
perl -pi -e 's,po4a,notpo4a,g' configure

# Make sure all scripts have use lib %p/lib/perl5 to find the modules it needs
perl -pi -e 's,^(\#\!/usr/bin/perl.*)$,$1\nuse lib "%p/lib/perl5";,' %b/scripts/*.pl

# fix paths
for i in %b/po/*.po %b/po/*.pot %b/doc/triggers.txt %b/man/*.[13578] %b/man/*/*.[13578]; do \
  perl -pi -e 's,/usr,%p,g' $i; \
  perl -pi -e 's,/var,%p/var,g' $i; \
  perl -pi -e 's,/etc,%p/etc,g' $i; \
  perl -pi -e 's,amd64,x86_64,g' $i; \
done 

cp scripts/t/200_Dpkg_Shlibs/objdump.basictags-amd64 scripts/t/200_Dpkg_Shlibs/objdump.basictags-x86_64

# Fink uses "x86_64" instead of "amd64"
perl -pi -e 's,amd64,x86_64,g' *table debian/archtable scripts/Makefile.in scripts/Makefile.am scripts/t/200_Dpkg_Shlibs/basictags.c scripts/t/200_Dpkg_Shlibs/basictags.symbols scripts/t/200_Dpkg_Shlibs/objdump.basictags-x86_64 scripts/t/200_Dpkg_Shlibs.t

# Fix for tar (Slightly modified for dpkg-bootstrap)
if [ "%n" = "dpkg-bootstrap" ]; then \
  if [[ $(/usr/bin/sw_vers -productVersion) > 10.8 ]]; then \
    perl -pi -e 's,\"tar\",\"/usr/bin/tar\",g' dpkg-deb/build.c dpkg-deb/extract.c lib/dpkg/dpkg.h lib/dpkg/subproc.c; \
    perl -pi -e 's,--warning=no-timestamp,-v,g' dpkg-deb/extract.c; \
    perl -pi -e 's,--format=gnu,--format=ustar,g' dpkg-deb/build.c; \
  else \
    perl -pi -e 's,\"tar\",\"/usr/bin/gnutar\",g' dpkg-deb/build.c dpkg-deb/extract.c lib/dpkg/dpkg.h lib/dpkg/subproc.c; \
    perl -pi -e 's,--warning=no-timestamp,--format=gnu,g' dpkg-deb/extract.c; \
  fi \
else \
  perl -pi -e 's,\"tar\",\"%p/bin/gnutar\",g' dpkg-deb/build.c dpkg-deb/extract.c lib/dpkg/dpkg.h lib/dpkg/subproc.c; \
fi

# Fix for older gcc ie: 10.5
perl -pi -e 's,-Wvla ,,g' configure

# Move dselect and dpkg-dev locals for cleaner Install Phases
perl -pi -e 's,localedir = \$\(datadir\)\/locale,localedir = \$(datadir)/locale-dselect,g' dselect/Makefile.in
perl -pi -e 's,localedir = \@localedir\@,localedir = \@localedir\@-dselect,g' dselect/po/Makefile.in.in
perl -pi -e 's,localedir = \@localedir\@,localedir = \@localedir\@-perl,g' scripts/Makefile.in scripts/po/Makefile.in.in
<<

SetCFLAGS: -g -O2 -fstack-protector -Wformat -fPIE -F/System/Library/Frameworks/CoreFoundation.framework -Wno-unused-parameter -Wno-missing-field-initializers -Wno-cast-align -Wno-format-security
SetCPPFLAGS: -D_FORTIFY_SOURCE=2
SetCXXFLAGS: -g -O2 -fstack-protector -Wformat -fPIE
SetLDFLAGS: -Wl,-read_only_stubs -Wl,-bind_at_load -fPIE -Wl,-pie -framework CoreFoundation

# Using %P for admindir and localstatedir is crucial for bootstrap version.
### Uncomment --disable-dselect for bootstrap version, don't make dselect
#  --disable-dselect \
ConfigureParams: <<
  --disable-start-stop-daemon \
  --with-admindir=%P/var/lib/dpkg \
  --mandir=%p/share/man \
  --infodir=%p/share/info \
  --sysconfdir=%p/etc \
  --localstatedir=%P/var \
  --with-zlib \
  --with-liblzma \
  --with-bz2 \
  --srcdir=%b \
  --build=%m-apple-darwin \
  --disable-linker-optimisations \
  PERL_LIBDIR=%p/lib/perl5 \
  PERL=/usr/bin/perl
<<

InfoTest: <<
  TestConfigureParams: --disable-silent-rules
  TestDepends: <<
    io-string-pm,
    time-date-pm,
    objtools,
    sensible-utils
  <<
  TestScript: make check || exit 2
<<

InstallScript: <<
  install -d -m 0755 %i/share/doc/dpkg

  make install DESTDIR=%d

  install -d -m 0755 %i/etc/dpkg/origins
  install -c -p -m 644 fink/origins %i/etc/dpkg/origins/fink
  install -c -p -m 644 debian/dselect.cfg %i/etc/dpkg
  ## currently in fink
  # install -c -p -m 644 debian/shlibs.default %i/etc/dpkg
  install -c -p -m 644 debian/shlibs.override %i/etc/dpkg
  install -c -p -m 644 fink/buildflags.conf %i/etc/dpkg
  rm -rf %i/lib/dpkg/methods/*

  install -m 0755 fink/md5sum %i/bin

  install -d -m 0755 %i/etc/cron.daily
  install -d -m 0755 %i/var/backups
  install -m 0644 fink/dpkg.cron.daily %i/etc/cron.daily/dpkg

  # install fink as a vendor
  install -m 0644 scripts/Dpkg/Vendor/Fink.pm %i/lib/perl5/Dpkg/Vendor/Fink.pm

  # some files that were previously installed in sbin are now in bin
  # but some stuff still expects it in sbin
  ln -s %p/bin/dpkg-divert %i/sbin/dpkg-divert
  ln -s %p/bin/dpkg-statoverride %i/sbin/dpkg-statoverride
  ln -s %p/bin/update-alternatives %i/sbin/update-alternatives
<<
ConfFiles: <<
  %p/etc/dpkg/origins/fink
<<
DocFiles: <<
  ABOUT-NLS AUTHORS COPYING ChangeLog NEWS
  README README.translators THANKS TODO
<<
Description: The Debian package manager
DescDetail: <<
This package provides the low-level infrastructure for handling the
installation and removal of Debian software packages.
.
For Debian package development tools, install dpkg-dev.
<<
DescPackaging: <<
In may of 2010, version 1.10.21 which had been used by Fink since 2002, was
bumped to 1.15.5.6. Between those versions, some files were removed and some
were added. For example, 822-date, md5sum and cleanup-info were removed from
the package, and dpkg-trigger, dpkg-vendor and dpkg-gensymbols were removed.

Because 'md5sum' is often used and no longer available, this package adds
an md5sum tool in the patch. This tool, written in Perl and using the standard
Perl on OS X, does not have any dependencies apart from the 'md5' executable
installed on every OS X system.
<<
DescPort: <<
1.10.9 
- Removed --without-zlib flag
- Gets confused about top_srcdir without the --srcdir arg.
- Fixed bug with BR manpage
- Patched update-rc.d out of the app check code, not needed on OS X.

Pre-Jaguar: Needed fixes to use the right architecture, disable code that uses
unimplemented functions on Darwin and other stuff.

Added code to support the pseudo package 'macosx' and 'darwin'.

Fix to install-info script to prevent a certain problem with section titles.

Patched to run 'fink-virtual-pkgs' to see what packages we have outside of $prefix.

Patched to suppress warning about BuildDependsOnly control field.

Previous versions by Christoph Pfisterer.

Patched to not remove Darwin's system-critical symlinks (/etc /tmp /var)

Patched to hardcode complete paths to our component executables
instead of relying on PATH

Patch 'dpkg -b' tar invocation to avoid warning under tar>=1.16
See: http://permalink.gmane.org/gmane.os.apple.fink.core/1281

Patch 'dpkg -b' tar invocation to not die if tar returns exit code 1.  
(Exit 1 is a non-fatal error for tar; exit 2 is fatal.)  patch written by vasi

Fink's make-3.81-1 breaks compiling so use Apple's to be safe.

The on-board getopt needs tweaking for darwin, but isn't needed at all
because libSystem has what dpkg needs, so just scrap it.

Remove un/misused variable in dpkg enquiry.c (solve bus error in --architecture)

Filesystem may be case-insensitive, so do case-insensitive check for
"dpkg -i" replacing files in an already-installed other package

1.15.5.6 adds a new 'md5sum' tool, see DescPackaging for more information.
Also the COPYING filename was updated to point to a Fink path, so
'dpkg --license' works correctly.

PERL5LIB is now set correctly in finkinit, because scripts may need to find
%p/lib/perl5 for Dpkg.pm.

A wrapper for setenv was added to src/help.c because of a crash I saw earlier.
Some investigation turned out that setenv(x, 0, y) crashes on my Snow Leopard
system, while on Linux it doesn't. The wrapper checks if 'name' or 'value'
are zero, and return 0 if they are, preventing the crash.
<<

PreInstScript: <<
# This script can be called in the following ways:
#
# Before the package is installed:
#   <new-preinst> install
#
# Before removed package is upgraded:
#   <new-preinst> install <old-version>
#
# Before the package is upgraded:
#   <new-preinst> upgrade <old-version>
#
#
# If postrm fails during upgrade or fails on failed upgrade:
#   <old-preinst> abort-upgrade <new-version>

# Handle upgrades from pre-conffile dpkg.cfg
upgrade_dpkg_non_conffile()
{
    if [ -r /etc/dpkg/dpkg.cfg ]; then
        dpkg_cfg_md5="535552ad5ee9145dbc7a34c264df4e59  %p/etc/dpkg/dpkg.cfg"
        if echo "$dpkg_cfg_md5" | md5sum -c >/dev/null 2>&1; then
            echo "Removing non-modified dpkg.cfg to be replaced by a conffile ..."
            rm -f %p/etc/dpkg/dpkg.cfg
        fi
    fi
}

kill_bad_alternatives () {
    local IFS=""
    admindir=${DPKG_ADMINDIR:-%p/var/lib/dpkg}
    ALTDIR="$admindir/alternatives"
    for alt in $ALTDIR/*; do
        if [ ! -f $alt ]; then
            # In case it's been removed by the code below, or in case
            # it's not a real file
            continue
        fi
        {
            read mode || continue
            read mainlink || continue
            while true; do
                read slave || break
                if [ "$slave" = "" ]; then
                    break
                fi
                if [ -e "$ALTDIR/$slave" ]; then
                    echo "Removing conflicting master alternative $slave (it is slave of $(basename $alt))..."
                    rm -f "$ALTDIR/$slave"
                fi
                read slavelink || break
            done
        } <$alt
    done
}

case "$1" in
    install)
        ;;

    upgrade)
        # Cleanup bad alternatives that would choke with new
        # update-alternatives (see #530633, #531611, #532739, #521760)
        if dpkg --compare-versions "$2" lt 1.15.3; then
            kill_bad_alternatives
        fi

        case "$2" in
            # Upgrade from pre-conffile dpkg.cfg
            1.9.21 | 1.10.* )
                upgrade_dpkg_non_conffile
                ;;
        esac
        ;;

    abort-upgrade)
        ;;


    *)
        echo "$0 called with unknown argument \`$1'" 1>&2
        exit 1
        ;;
esac
<<
PostInstScript: <<
# This script can be called in the following ways:
#
# After the package was installed:
#   <postinst> configure <old-version>
#
#
# If prerm fails during upgrade or fails on failed upgrade:
#   <old-postinst> abort-upgrade <new-version>
#
# If prerm fails during removal:
#   <old-postinst> abort-remove
#
# If prerm fails during deconfiguration of a package:
#   <postinst> abort-deconfigure in-favour <new-package> <version>
#          removing <old-package> <version>
#
# If prerm fails during replacement due to conflict:
#   <postinst> abort-remove in-favour <new-package> <version>

# this should be done in base-files but since fink has origins in dpkg we
# do it here
if [ ! -e %p/etc/dpkg/origins/default ]; then
  if [ -e %p/etc/dpkg/origins/fink ]; then
    ln -sf fink %p/etc/dpkg/origins/default
  fi
fi

if [ ! -d %p/var/lib/dpkg ]; then
  mkdir -m 755 -p %p/var/lib/dpkg
  chown root:root %p/var/lib/dpkg
fi

if [ ! -f %p/var/lib/dpkg/status ]; then
  echo > %p/var/lib/dpkg/status
  chmod 644 %p/var/lib/dpkg/status
  chown root:root %p/var/lib/dpkg/status
fi

### end base-files postinst stuff

# Create the database files if they don't already exist
create_database() {
    admindir=${DPKG_ADMINDIR:-%p/var/lib/dpkg}

    for file in diversions statoverride status; do
        if [ ! -f "$admindir/$file" ]; then
            touch "$admindir/$file"
        fi
    done
}


# Move the info directory from %p/info to %p/share/info
move_info_directory() {
    if [ -d %p/info ] && [ ! -L %p/info ] \
        && [ -f %p/info/dir ] && [ ! -L %p/info/dir ]
    then
        echo "Moving %p/info/dir to %p/share/info/dir ..."
        mv %p/info/dir %p/share/info/dir
        if [ -f %p/info/dir.old ]; then
            mv %p/info/dir.old %p/share/info/dir.old
        fi
    fi
}


# Remove the /usr/info symlinks we used to generate
remove_info_symlink() {
    if [ -L %p/info ]; then
        echo "Removing %p/info symlink ..."
        rm %p/info
    elif [ -L %p/info/dir ]; then
        echo "Removing %p/info/dir symlink ..."
        rm %p/info/dir
    fi
}

# Create log file and set default permissions if possible
create_logfile() {
    logfile=%p/var/log/dpkg.log
    touch $logfile
    chmod 644 $logfile
    chown root:root $logfile 2>/dev/null || chown 0:0 $logfile
}


case "$1" in
    configure)
        create_database
        create_logfile

        move_info_directory
        remove_info_symlink
        ;;

    abort-upgrade|abort-deconfigure|abort-remove)
        ;;

    *)
        echo "$0 called with unknown argument \`$1'" 1>&2
        exit 1
        ;;
esac
<<
PreRmScript: <<
# This script can be called in the following ways:
#
# Before the package is removed:
#      <prerm> remove
#
# Before an upgrade:
#      <old-prerm> upgrade <new-version>
# if that fails:
#      <new-prerm> failed-upgrade <old-version>
#
#
# Before package is deconfigured while dependency is replaced due to conflict:
#      <prerm> deconfigure in-favour <new-package> <version>
#              removing <old-package> <version>
#
# Before the package is replaced due to conflict:
#      <prerm> remove in-favour <new-package> <version>

ensure_no_triggers_noawait()
{
    admindir=${DPKG_ADMINDIR:-%p/var/lib/dpkg}
    pkgadmindir=$admindir/info

    trig_noawait=$(find "$pkgadmindir" -name "*.triggers" -type f | \
                   xargs -r grep -El "^(interest|activate)-(no)?await" | \
                   sed -e 's,^.*/\([^/.:]\+\)[^/]\+$,\1,')

    # Abort if we cannot possibly downgrade
    if [ -n "$trig_noawait" ]; then
        cat <<- MSG
        dpkg: error: You have packages using the "interest-noawait" and/or
        "activate-noawait" trigger directives but the dpkg version that
        you're trying to downgrade to doesn't support them. Aborting
        downgrade.

        List of affected packages:

        $trig_noawait
        MSG
        exit 1
    fi

    bad_triggers_files=$(find "$admindir/triggers" -type f | \
                         xargs -r grep -l "/noawait$" || true)
    if [ -n "$bad_triggers_files" ]; then
        cat <<- MSG
        dpkg: error: Some internal trigger files unexpectedly reference
        packages tagged with "/noawait" while their corresponding
        infodb files doesn't seem to contain any "interest-noawait"
        directive. Aborting the downgrade as those tags are not supported
        by the version you're trying to downgrade to.

        List of internal trigger files that are affected:

        $bad_triggers_files
        MSG
        exit 1
    fi
}

downgrade_multiarch_infodb()
{
    admindir=${DPKG_ADMINDIR:-%p/var/lib/dpkg}
    pkgadmindir=$admindir/info
    triggersdir=$admindir/triggers

    coinst_pkgs="`ls "$pkgadmindir" | \
        sed -n -e 's/^\([^:]\+:[^.]\+\)\..*$/\1/p' | sort -u | \
        cut -d: -f1 | uniq -d`"

    # Abort if we cannot possibly downgrade
    if [ -n "$coinst_pkgs" ]; then
        cat <<- MSG
        dpkg: error: You have more than one architecture instance for some
        installed 'Multi-Arch: same' packages, to be able to downgrade dpkg
        you will need to have only one instance installed per package.

        List of co-installed packages:

        $coinst_pkgs
        MSG
        exit 1
    fi

    bad_dep_pkgs=$(dpkg-query -f '${Package}\t${Depends} ${Recommends} ${Suggests} ${Enhances} ${Conflicts} ${Replaces} ${Breaks}\n' -W | \
        grep ":any" | cut -f1 | sort -u)
    if [ -n "$bad_dep_pkgs" ]; then
        cat <<- MSG
        dpkg: error: Some installed packages have multiarch dependencies that
        the old dpkg won't parse. You should get rid of them (or downgrade
        them to versions without those dependencies) before proceeding with
        dpkg's downgrade.

        List of affected packages:

        $bad_dep_pkgs
        MSG
        exit 1
    fi

    dep_fields='Depends|Recommends|Suggests|Enhances|Conflicts|Replaces|Breaks'
    if grep -qE "^($dep_fields):.*:any" $admindir/available; then
        cat <<- MSG
        dpkg: error: Some available packages have multiarch dependencies that
        the old dpkg won't parse. You should clear this file before proceeding
        with dpkg's downgrade, with:

          # dpkg --clear-avail
        MSG
        exit 1
    fi

    file_triggers_pkgs="`sed -n -e 's/^[^ ]\+ \([^:]\+\):[^.]\+$/\1/p' \
        $triggersdir/File| sort -u`"

    if [ -n "$file_triggers_pkgs" ]; then
        cat <<-MSG
        dpkg: error: The triggers database contains arch-qualified package
        names that the old dpkg won't parse. You should get rid of them (or
        downgrade them to a non Multi-Arch: same version) before proceeding
        with dpkg's downgrade.

        List of affected packages:

        $file_triggers_pkgs
        MSG
        exit 1
    fi

    echo "Downgrading the multiarch dpkg control files database ..."
    ls $pkgadmindir | grep : | while read oldfile; do
        # We first do a round of hardlinks to the new names, so that the db
        # will never be unusable for either of the dpkg versions.
        newfile=$(echo $oldfile | sed -e 's/:[^.]\+//')
        ln -f "$pkgadmindir/$oldfile" "$pkgadmindir/$newfile"
    done
}

case "$1" in
    upgrade)
        # Allow the downgrade only if no package is using the
        # (interest|activate)-noawait trigger directives
        if dpkg --compare-versions "$2" lt 1.16.1; then
            ensure_no_triggers_noawait
        fi
        # Downgrade the multiarch db to a "monoarch" db layout
        if dpkg --compare-versions "$2" lt 1.16.2; then
            downgrade_multiarch_infodb
        fi
        ;;

    remove|failed-upgrade|deconfigure)
        ;;

    *)
        echo "$0 called with unknown argument \`$1'" 1>&2
        exit 1
        ;;
esac
<<
PostRmScript: <<
# This script can be called in the following ways:
#
# After the package was removed:
#   <postrm> remove
#
# After the package was purged:
#   <postrm> purge
#
# After the package was upgraded:
#   <old-postrm> upgrade <new-version>
# if that fails:
#   <new-postrm> failed-upgrade <old-version>
#
#
# After all of the packages files have been replaced:
#   <postrm> disappear <overwriting-package> <version>
#
#
# If preinst fails during install:
#   <new-postrm> abort-install
#
# If preinst fails during upgrade of removed package:
#   <new-postrm> abort-install <old-version>
#
# If preinst fails during upgrade:
#   <new-postrm> abort-upgrade <old-version>


# Remove log file when dpkg is purged
remove_logfile() {
    rm -f %p/var/log/dpkg.log %p/var/log/dpkg.log.* 2>/dev/null
}

# Cleanup multiarch infodb leftovers
cleanup_multiarch_infodb()
{
    admindir=${DPKG_ADMINDIR:-%p/var/lib/dpkg}
    pkgadmindir=$admindir/info

    echo "Cleaning up the multiarch dpkg control files database ..."
    ls $pkgadmindir | grep : | while read oldfile; do
        rm "$pkgadmindir/$oldfile"
    done
    rm -f $pkgadmindir/format
}

case "$1" in
    remove)
        ;;

    purge)
        remove_logfile
        ;;

    upgrade)
        # Downgrade the multiarch db to a "monoarch" db layout
        if dpkg --compare-versions "$2" lt 1.16.2; then
            cleanup_multiarch_infodb
        fi
        ;;

    failed-upgrade|disappear|abort-install|abort-upgrade)
        ;;


    *)
        echo "$0 called with unknown argument \`$1'" 1>&2
        exit 1
        ;;
esac
<<
License: GPL
Homepage: http://packages.qa.debian.org/d/dpkg.html

SplitOff: <<
  Package: lib%N-dev
  Replaces: dpkg (<< 1.15.8)
  Suggests: apt
  BuildDependsOnly: True
  Files: <<
    include
    lib/pkgconfig
    lib/libdpkg.a
  <<
  DocFiles: AUTHORS THANKS doc/README.api doc/README.feature-removal-schedule
  Description: Debian package management static library
  DescDetail: <<
This package provides the header files and static library necessary to
develop software using libdpkg, the same library used internally by dpkg.
.
Note though, that the API is to be considered volatile, and might change
at any time, use at your own risk.
  <<
<<

SplitOff2: <<
  Package: %N-dev
  Depends: <<
    lib%N-pm (= %v-%r),
    base-files (>= 1.9.12-1)
  <<
  RuntimeDepends: <<
    objtools,
    bzip2,
    xz
  <<
  Recommends: <<
    patch,
    make,
    gnupg2,
    algorithm-merge-pm
  <<
  Replaces: dpkg (<< 1.15.8)
  Essential: yes
  ### Currently in fink
  # ConfFiles: %p/etc/dpkg/shlibs.default %p/etc/dpkg/shlibs.override
  ConfFiles: <<
    %p/etc/dpkg/shlibs.override
    %p/etc/dpkg/buildflags.conf
  <<
  Files: <<
    etc/dpkg/shlibs.override
    etc/dpkg/buildflags.conf
    bin/dpkg-architecture
    bin/dpkg-buildflags
    bin/dpkg-buildpackage
    bin/dpkg-checkbuilddeps
    bin/dpkg-distaddfile
    bin/dpkg-genchanges
    bin/dpkg-gencontrol
    bin/dpkg-gensymbols
    bin/dpkg-mergechangelogs
    bin/dpkg-name
    bin/dpkg-parsechangelog
    bin/dpkg-scanpackages
    bin/dpkg-scansources
    bin/dpkg-shlibdeps
    bin/dpkg-source
    bin/dpkg-vendor
    share/dpkg/*.mk
    share/man/man1/dpkg-architecture.1
    share/man/man1/dpkg-buildflags.1
    share/man/man1/dpkg-buildpackage.1
    share/man/man1/dpkg-checkbuilddeps.1
    share/man/man1/dpkg-distaddfile.1
    share/man/man1/dpkg-genchanges.1
    share/man/man1/dpkg-gencontrol.1
    share/man/man1/dpkg-gensymbols.1
    share/man/man1/dpkg-mergechangelogs.1
    share/man/man1/dpkg-name.1
    share/man/man1/dpkg-parsechangelog.1
    share/man/man1/dpkg-scanpackages.1
    share/man/man1/dpkg-scansources.1
    share/man/man1/dpkg-shlibdeps.1
    share/man/man1/dpkg-source.1
    share/man/man1/dpkg-vendor.1
    share/man/man5/deb*
  <<
  DocFiles: AUTHORS THANKS doc/README.api doc/README.feature-removal-schedule doc/triggers.txt
  Description: Debian package development tools
  DescDetail: <<
This package provides the development tools (including dpkg-source)
required to unpack, build and upload Debian source packages.
.
Most Debian source packages will require additional tools to build;
for example, most packages need make and the C compiler gcc.
  <<
<<

SplitOff3: <<
  Package: lib%N-pm
  Depends: <<
    %N (>= 1.15.8)
  <<
  # sensible-utils is a runtime dep for V2.pm
  RuntimeDepends: <<
    time-date-pm,
    sensible-utils
  <<
  Recommends: <<
    bzip2,
    xz,
    file-fcntllock-pm
  <<
  Suggests: <<
    gnupg2,
    objtools,
    patch
  <<
  Replaces: <<
    dpkg (<< 1.15.8),
    dpkg-dev (<< 1.15.6)
  <<
  Essential: yes
  Files: <<
    lib/dpkg/parsechangelog
    lib/perl5/Dpkg
    lib/perl5/Dpkg.pm
    share/man/man3
  <<
  InstallScript: <<
    mkdir -p %i/share
    mv %I/share/locale-perl %i/share/locale
  <<
  DocFiles: AUTHORS THANKS doc/README.api doc/README.feature-removal-schedule
  Description: Dpkg perl modules
  DescDetail: <<
This package provides the perl modules used by the scripts
in dpkg-dev. They cover a wide range of functionalities. Among them
there are the following modules:
.
 - Dpkg::Arch: manipulate Debian architecture information
 - Dpkg::BuildOptions: parse and manipulate DEB_BUILD_OPTIONS
 - Dpkg::Changelog: parse Debian changelogs
 - Dpkg::Checksums: generate and parse checksums
 - Dpkg::Compression::Process: wrapper around compression tools
 - Dpkg::Compression::FileHandle: transparently (de)compress files
 - Dpkg::Control: parse and manipulate Debian control information
   (.dsc, .changes, Packages/Sources entries, etc.)
 - Dpkg::Deps: parse and manipulate dependencies
 - Dpkg::ErrorHandling: common error functions
 - Dpkg::Index: collections of Dpkg::Control (Packages/Sources files for
   example)
 - Dpkg::IPC: spawn sub-processes and feed/retrieve data
 - Dpkg::Substvars: substitute variables in strings
 - Dpkg::Vendor: identify current distribution vendor
 - Dpkg::Version: parse and manipulate Debian package versions
.
All the packages listed in Suggests or Recommends are used by some of the
modules.
  <<
<<

# Comment out entire SplitOff for bootstrap version
SplitOff4: <<
  Package: dselect
  Depends: <<
    libgettext8-shlibs,
    libncursesw5-shlibs (>= 5.6+20070908)
  <<
  RuntimeDepends: <<
    dpkg (>= 1.15.8)
  <<
  Conflicts: <<
    dpkg-ftp,
    dpkg-multicd
  <<
  Replaces: <<
    dpkg-ftp,
    dpkg-multicd,
    dpkg (<< 1.15.8),
    dpkg-dev (<< 1.15.6)
  <<
  ConfFiles: %p/etc/dpkg/dselect.cfg
  Files: <<
    etc/dpkg/dselect.cfg
    etc/dpkg/dselect.cfg.d
    bin/dselect
    lib
    share/man/man1/dselect.1
    var/lib/dpkg/methods
    share/man/man5/dselect.cfg.5
  <<
  InstallScript: <<
    mkdir -p %i/share
    mv %I/share/locale-dselect %i/share/locale
  <<
  DocFiles: AUTHORS THANKS doc/README.feature-removal-schedule
  Description: Debian package management front-end
  DescDetail: <<
dselect is a high-level interface for managing the installation and
removal of Debian software packages.
.
Many users find dselect intimidating and new users may prefer to use
apt-based user interfaces.
  <<
<<
